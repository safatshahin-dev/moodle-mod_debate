{"version":3,"sources":["../src/debate_response.js"],"names":["delay","timer","callback","ms","clearTimeout","setTimeout","keyup","remove","userResponsetext","val","courseID","parseInt","attr","debateID","cmID","responseType","dataUserID","console","log","responseAjax","AJAX","call","methodname","args","courseid","debateid","cmid","response","responsetype","done","found","result","getResponses","JSON","parse","data","templates","render","found_response","then","html","debateResponse","after","fail","notification","exception"],"mappings":"gIACA,OACA,OACA,OACA,O,mDAEA,GAAIA,CAAAA,CAAK,CAAI,UAAW,CACpB,GAAIC,CAAAA,CAAK,CAAG,CAAZ,CACA,MAAO,UAASC,CAAT,CAAmBC,CAAnB,CAAuB,CAC1BC,YAAY,CAACH,CAAD,CAAZ,CACAA,CAAK,CAAGI,UAAU,CAACH,CAAD,CAAWC,CAAX,CACrB,CACJ,CANW,EAAZ,CAOA,cAAE,4BAAF,EAAgCG,KAAhC,CAAsC,UAAW,CAC7CN,CAAK,CAAC,UAAW,CACb,cAAE,KAAF,EAASO,MAAT,CAAgB,2BAAhB,EADa,GAETC,CAAAA,CAAgB,CAAG,cAAE,4BAAF,EAAgCC,GAAhC,EAFV,CAGTC,CAAQ,CAAGC,QAAQ,CAAC,cAAE,4BAAF,EAAgCC,IAAhC,CAAqC,aAArC,CAAD,CAHV,CAITC,CAAQ,CAAGF,QAAQ,CAAC,cAAE,4BAAF,EAAgCC,IAAhC,CAAqC,aAArC,CAAD,CAJV,CAKTE,CAAI,CAAGH,QAAQ,CAAC,cAAE,4BAAF,EAAgCC,IAAhC,CAAqC,SAArC,CAAD,CALN,CAMTG,CAAY,CAAGJ,QAAQ,CAAC,cAAE,4BAAF,EAAgCC,IAAhC,CAAqC,mBAArC,CAAD,CANd,CAOTI,CAAU,CAAG,cAAE,4BAAF,EAAgCJ,IAAhC,CAAqC,aAArC,CAPJ,CAQbK,OAAO,CAACC,GAAR,CAAY,qBAAZ,EACA,GAAIC,CAAAA,CAAY,CAAGC,UAAKC,IAAL,CAAU,CAAC,CAC1BC,UAAU,CAAE,gCADc,CAE1BC,IAAI,CAAE,CACFC,QAAQ,CAAEd,CADR,CAEFe,QAAQ,CAAEZ,CAFR,CAGFa,IAAI,CAAEZ,CAHJ,CAIFa,QAAQ,CAAEnB,CAJR,CAKFoB,YAAY,CAAEb,CALZ,CAFoB,CAAD,CAAV,CAAnB,CAUAI,CAAY,CAAC,CAAD,CAAZ,CAAgBU,IAAhB,CAAqB,SAASC,CAAT,CAAgB,CACjC,GAAIA,CAAK,CAACC,MAAV,CAAkB,IACVC,CAAAA,CAAY,CAAGC,IAAI,CAACC,KAAL,CAAWJ,CAAK,CAACK,IAAjB,CADL,CAKdC,UAAUC,MAAV,CAAiB,iCAAjB,CAHc,CACVC,cAAc,CAAEN,CADN,CAGd,EAA6DO,IAA7D,CAAkE,SAASC,CAAT,CAAmB,CACjF,GAAIC,CAAAA,CAAc,CAAG,cAAE,IAAMzB,CAAR,CAArB,CACAyB,CAAc,CAACC,KAAf,CAAqBF,CAArB,CACH,CAHD,EAGGG,IAHH,CAGQC,UAAaC,SAHrB,CAIH,CACJ,CAXD,EAWGF,IAXH,CAWQC,UAAaC,SAXrB,CAYH,CA/BI,CA+BF,GA/BE,CAgCR,CAjCD,C","sourcesContent":["// require(['jquery', 'core/ajax', 'core/templates'], function($, AJAX, templates) {\nimport $ from 'jquery';\nimport AJAX from 'core/ajax';\nimport templates from 'core/templates';\nimport notification from 'core/notification';\n\nvar delay = (function() {\n    var timer = 0;\n    return function(callback, ms) {\n        clearTimeout(timer);\n        timer = setTimeout(callback, ms);\n    };\n})();\n$(\"#mod-debate-response-input\").keyup(function() {\n    delay(function() {\n        $(\"div\").remove(\".mod-debate-find-response\");\n        var userResponsetext = $(\"#mod-debate-response-input\").val();\n        var courseID = parseInt($(\"#mod-debate-response-input\").attr('data-course'));\n        var debateID = parseInt($(\"#mod-debate-response-input\").attr('data-debate'));\n        var cmID = parseInt($(\"#mod-debate-response-input\").attr('data-cm'));\n        var responseType = parseInt($(\"#mod-debate-response-input\").attr('data-responsetype'));\n        var dataUserID = $(\"#mod-debate-response-input\").attr('data-userid');\n        console.log('donno what is wrong');\n        var responseAjax = AJAX.call([{\n            methodname: 'mod_debate_find_debate_respose',\n            args: {\n                courseid: courseID,\n                debateid: debateID,\n                cmid: cmID,\n                response: userResponsetext,\n                responsetype: responseType\n            }\n        }]);\n        responseAjax[0].done(function(found) {\n            if (found.result) {\n                var getResponses = JSON.parse(found.data);\n                var context = {\n                    found_response: getResponses\n                };\n                templates.render('mod_debate/debate_find_response', context).then(function(html, js) {\n                    var debateResponse = $('#' + dataUserID);\n                    debateResponse.after(html);\n                }).fail(notification.exception);\n            }\n        }).fail(notification.exception);\n    }, 700);\n});\n// });\n"],"file":"debate_response.min.js"}